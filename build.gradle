plugins {
    id 'com.gradleup.shadow' version "9.0.0-beta7"
    id 'org.cadixdev.licenser' version '0.6.1' apply false
    id 'org.checkerframework' version '0.6.48' apply false
    id 'maven-publish'
    id 'java'
}

group = 'me.thedivazo.libs'
version = '1.0.1'

publishing {
    repositories {
        maven {
            url("$myMavenRepoWriteUrl")

            credentials {
                username myMavenRepoWriteUsername
                password myMavenRepoWritePassword
            }

            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.gradleup.shadow'
    apply plugin: 'org.cadixdev.licenser'

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs += [
//            '-Xlint:unchecked',
//            '-Xlint:deprecation'
    ]
    compileJava.options.release.set 21
    javadoc.options.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url('https://jitpack.io') }
        maven { url('https://repo.papermc.io/repository/maven-public/') }
        maven { url('https://oss.sonatype.org/content/repositories/snapshots') }
        maven { url('https://hub.spigotmc.org/nexus/content/repositories/snapshots/') }
        maven { url('https://repo.dmulloy2.net/repository/public/') }
    }

    license {
        header = rootProject.file('HEADER')
        include '**/*.java'
        newLine = true
    }
}

subprojects {
    if (['test'].contains(project.name)) return;

    apply plugin: 'org.checkerframework'

    version rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name}"

    dependencies {
        checkerFramework 'org.checkerframework:checker:3.49.0'
        implementation 'org.checkerframework:checker-qual:3.49.0'
    }

    checkerFramework {
        extraJavacArgs = [
                "-Astubs=${rootDir}"
        ]
        checkers = [
                'org.checkerframework.checker.nullness.NullnessChecker',
                'org.checkerframework.checker.index.IndexChecker'
        ]
    }

    jar {
        from '../LICENSE'
    }

    shadowJar {
        File target = file("$rootDir/target")
        target.deleteDir()
        destinationDirectory.set(target)
        archiveClassifier.set('')
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }
    sourcesJar {
        destinationDirectory.set(file("$rootDir/target"))
    }

    tasks.withType(Javadoc).configureEach {
        failOnError = false
    }

    javadocJar {
        destinationDirectory.set(file("$rootDir/target"))
    }
    shadowJar.dependsOn(sourcesJar/*, javadocJar*/)

    jar.dependsOn(shadowJar)

    if (['core'].contains(project.name)) {
        publishing {
            publications {
                mavenCore(MavenPublication) {
                    groupId = 'me.thedivazo.libs.DVZConfig'
                    artifactId = project.name
                    version = "$rootProject.version"
                    artifact shadowJar
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }

    if (['lang-yml'].contains(project.name)) {
        publishing {
            publications {
                mavenLangYml(MavenPublication) {
                    groupId = 'me.thedivazo.libs.DVZConfig'
                    artifactId = project.name
                    version = "$rootProject.version"
                    artifact shadowJar
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }

    if (['platform-paper'].contains(project.name)) {
        publishing {
            publications {
                mavenPlatformPaper(MavenPublication) {
                    groupId = 'me.thedivazo.libs.DVZConfig'
                    artifactId = project.name
                    version = "$rootProject.version"
                    artifact shadowJar
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }

    if (['platform-spigot'].contains(project.name)) {
        publishing {
            publications {
                mavenPlatformSpigot(MavenPublication) {
                    groupId = 'me.thedivazo.libs.DVZConfig'
                    artifactId = project.name
                    version = "$rootProject.version"
                    artifact shadowJar
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }
}